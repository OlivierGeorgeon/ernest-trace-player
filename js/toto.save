// TODO : get that cache out of the class
	//----------
	/*this.displayedBuffer = null;
	this.cachedBuffers = null;
	this.bufferCacheIndex = 0;
	this.bufferCacheLen = 5;
	
	this.initCache = function()
	{
		this.cachedBuffers =  new Array(this.bufferCacheLen);

		for(i = 0; i < this.bufferCacheLen; i++)
		{
			this.cachedBuffers[i] = new ObselIntervalBuffer(this.baseURI);
		}
		
		displayedBuffer = this.cachedBuffers[this.bufferCacheIndex];
	}
	
	this.getBestCacheEntry = function(begin, end)
	{
		// Default : provide the eldest one. //TODO : it isn't actually the eldest one
		var best = null;
		var score = 0;
		
		// Search for a entry that contains the wanted interval, on at least overlaps the interval 
		for(i = 0; i < this.bufferCacheLen; i++)
		{
			// Did we find the perfet one ?
			if(this.cachedBuffers[i].begin <= begin &&  this.cachedBuffers[i].end >= end)
				return i;
			else{
				var newScore = 0;
				// Second condition not needed, newScore'll only be negative. ok.
				if(this.cachedBuffers[i].begin <= begin/* && this.cachedBuffers[i].end > begin*/)
					newScore = this.cachedBuffers[i].end - begin;
				else if(this.cachedBuffers[i].end >= end/* && this.cachedBuffers[i].begin < end*/)
					newScore = end - this.cachedBuffers[i].begin;
				
				if(newScore > score)
				{
					best = i;
					score = newScore;
				}
			}
		}
		
		return best;
	}
	
	this.trySewInterval = function(beginV, endV)
	{
		var begin = beginV;
		var end = endV;
		var noMoreCache = false;
		
		var foundIndex = this.getBestCacheEntry(begin, end);
		if(foundIndex === null)
			var noMoreCache = true;
		else
			var sewedInterval = this.cachedBuffers[foundIndex];
		
		while((sewedInterval.begin <= begin && sewedInterval.end >= end)
		      || noMoreCache)
		{
			if(sewedInterval.begin <= begin)
			{
				end = sewedInterval.end;
			}else if(sewedInterval.end >= end)
			{
				begin = sewedInterval.begin;
			}
			
			var foundIndex = this.getBestCacheEntry(begin, end);
			if(foundIndex === null)
				var noMoreCache = true;
			else{
				
			}
			
		}
		
	}
	*/
	//----------